import java.lang.reflect.Type;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public final class ZWay {
    private final long jzway;

    public Controller controller;
    public Map<Integer, Device> devices;

    static {
        System.loadLibrary("jzway");
    }

    public ZWay(String name, String port, int speed, String config_folder, String translations_folder, String zddx_folder, long ternminator_callback) {
        jzway = jni_zwayInit(name, port, speed, config_folder, translations_folder, zddx_folder, ternminator_callback);

        controller = new Controller(this);
        devices = new HashMap<>();
    }

    public void discover() {
        jni_discover(jzway);
    }

    // Controller methods

    public boolean isRunning() { return jni_isRunning(jzway); }

    // TODO: Automate
    // AUTOGENERATED CODE BEGIN: CC HELPERS
    public Device.Instance.SwitchBinary switchBinary(Integer deviceId, Integer instanceId) {
        return ((ZWay.Device.Instance.SwitchBinary) devices.get(deviceId).instances.get(instanceId).commandsByName.get("switchBinary"));
    }
    // AUTOGENERATED CODE END: CC HELPERS

    // Callback stub
    private void successCallback(Object obj) {
        System.out.println("successCallback");
    }

    private void failureCallback(Object obj) {
        System.out.println("failureCallback");
    }

    private void dataCallback(int type, Object obj) {
        System.out.println("dataCallback: type = " + String.valueOf(type));
    }

    private void deviceCallback(int type, int deviceId, int instanceId, int commandClassId, Object obj) {
        System.out.println("deviceCallback: type = " + String.valueOf(type) + ", id = " + deviceId + ", instance = " + instanceId + ", commandClass = " + commandClassId);
    }

    private void terminateCallback() {
        System.out.println("terminateCallback");
    }

    // JNI functions
    private native long jni_zwayInit(String name, String port, int speed, String config_folder, String translations_folder, String zddx_folder, long ternminator_callback);
    private native void jni_discover(long ptr);
    private native boolean jni_isRunning(long ptr);
    private native void jni_addNodeToNetwork(long ptr, boolean startStop);
    private native void jni_removeNodeFromNetwork(long ptr, boolean startStop);
    private native void jni_setDefault(long ptr);
    private native long jni_zdataFind(long dh, String path, long jzway);
    private native long jni_zdataControllerFind(String path, long jzway);
    private native long jni_zdataDeviceFind(String path, int deviceId, long jzway);
    private native long jni_zdataInstanceFind(String path, int deviceId, int instanceId, long jzway);
    private native long jni_zdataCommandFind(String path, int deviceId, int instanceId, int commandId, long jzway);
    private native void jni_zdataAddCallbackEx(long dh);
    private native void jni_zdataRemoveCallbackEx(long dh);
    private native String jni_zdataGetName(long data);
    private native int jni_zdataGetType(long dh);
    private native boolean jni_zdataGetBoolean(long dh);
    private native int jni_zdataGetInteger(long dh);
    private native float jni_zdataGetFloat(long dh);
    private native String jni_zdataGetString(long dh);
    private native int[] jni_zdataGetBinary(long dh);
    private native int[] jni_zdataGetIntArray(long dh);
    private native float[] jni_zdataGetFloatArray(long dh);
    private native String[] jni_zdataGetStringArray(long dh);
    private native void jni_zdataSetEmpty(long dh);
    private native void jni_zdataSetBoolean(long dh, boolean data);
    private native void jni_zdataSetInteger(long dh, int data);
    private native void jni_zdataSetFloat(long dh, float data);
    private native void jni_zdataSetString(long dh, String data, boolean copy);
    private native void jni_zdataSetBinary(long dh, int[] data, int length, boolean copy);
    private native void jni_zdataSetIntArray(long dh, int[] data, int length);
    private native void jni_zdataSetFloatArray(long dh, float[] data, int length);
    private native void jni_zdataSetStringArray(long dh, String[] data, int length, boolean copy);
    private native long[] jni_zdataGetChildren(long dh);
    private native String jni_zdataGetPath(long dh);

    // AUTOGENERATED CODE BEGIN: NATIVE FUNCTION DECLARATIONS
    private native void jni_cc_switchBinarySet(long ptr, int deviceId, int instanceId, boolean value, int duration, long successCallback, long failureCallback, long callbackArg);
    // AUTOGENERATED CODE END: NATIVE FUNCTION DECLARATIONS

    public final class Data {
        public static final int phantomUpdate = 0x40;
        public static final int childEvent = 0x80;
        public static final int updated = 0x01;
        public static final int invalidated = 0x02;
        public static final int deleted = 0x03;
        public static final int childCreated = 0x04;
        public static final int Empty = 0;
        public static final int Bool = 1;
        public static final int Int = 2;
        public static final int Float = 3;
        public static final int String = 4;
        public static final int Binary = 5;
        public static final int IntArray = 6;
        public static final int FloatArray = 7;
        public static final int StringArray = 8;

        private Object value;
        // is equal to Integer.class when is null
        private Type valueType;
        // is equal to "Integer" when is null
        private String valueTypeStr;

        private long dh;

        public final String name;

        public final String path;

        private Boolean isAlive; // TODO implement everywhere where needed

        public Data(String path, long dhParent, long jzway) throws Exception {
            dh = jni_zdataFind(dhParent, path, jzway);
            name = jni_zdataGetName(dh);
            this.path = jni_zdataGetPath(dh);
            jni_zdataAddCallbackEx(dh);
            getValue();
        }

        public Data(String path, long jzway) throws Exception {
            dh = jni_zdataControllerFind(path, jzway);
            name = jni_zdataGetName(dh);
            this.path = jni_zdataGetPath(dh);
            jni_zdataAddCallbackEx(dh);
            getValue();
        }

        public Data(String path, int deviceId, long jzway) throws Exception {
            dh = jni_zdataDeviceFind(path, deviceId, jzway);
            name = jni_zdataGetName(dh);
            this.path = jni_zdataGetPath(dh);
            jni_zdataAddCallbackEx(dh);
            getValue();
        }

        public Data(String path, int deviceId, int instanceId, long jzway) throws Exception {
            dh = jni_zdataInstanceFind(path, deviceId, instanceId, jzway);
            name = jni_zdataGetName(dh);
            this.path = jni_zdataGetPath(dh);
            jni_zdataAddCallbackEx(dh);
            getValue();
        }

        public Data(String path, int deviceId, int instanceId, int commandId, long jzway) throws Exception {
            dh = jni_zdataCommandFind(path, deviceId, instanceId, commandId, jzway);
            name = jni_zdataGetName(dh);
            this.path = jni_zdataGetPath(dh);
            jni_zdataAddCallbackEx(dh);
            getValue();
        }

        private Data(long dh) throws Exception {
            this.dh = dh;
            this.path = jni_zdataGetPath(dh);
            name = jni_zdataGetName(dh);
        }

        /* @Override TODO replace finalizer with something else
        protected void finalize() throws Throwable {
            jni_zdataRemoveCallbackEx(dh);
        }*/

        private void dataCallback(int eventType, Object obj) throws Exception {
            // get type of the event
            boolean isPhantom = (phantomUpdate & eventType) > 0;
            boolean isChild = (childEvent & eventType) > 0;
            eventType = eventType & (~phantomUpdate) & (~childEvent);
            if (eventType == updated) {
                getValue();
            } else if (eventType == invalidated) {
                // do later
            } else if (eventType == deleted) {
                // do later
            } else if (eventType == childCreated) {
                // do later
            } else {
                throw new Exception("Type of the event is an invalid integer.");
            }
        }

        private void getValue() throws Exception {
            int dataType = jni_zdataGetType(dh);
            if (dataType == Bool) {
                valueType = Boolean.class;
                valueTypeStr = "Boolean";
                value = jni_zdataGetBoolean(dh);
            } else if (dataType == Int) {
                valueType = Integer.class;
                valueTypeStr = "Integer";
                value = jni_zdataGetInteger(dh);
            } else if (dataType == Float) {
                valueType = Float.class;
                valueTypeStr = "Float";
                value = jni_zdataGetFloat(dh);
            } else if (dataType == String) {
                valueType = String.class;
                valueTypeStr = "String";
                value = jni_zdataGetString(dh);
            } else if (dataType == Binary) {
                valueType = Byte[].class;
                valueTypeStr = "Byte[]";
                int[] val = jni_zdataGetBinary(dh);
                value = Arrays.stream( val ).boxed().toArray( Integer[]::new );
            } else if (dataType == IntArray) {
                valueType = Integer[].class;
                valueTypeStr = "Integer[]";
                int[] val = jni_zdataGetIntArray(dh);
                value = Arrays.stream( val ).boxed().toArray( Integer[]::new );
            } else if (dataType == FloatArray) {
                valueType = Float[].class;
                valueTypeStr = "Float[]";
                float[] val = jni_zdataGetFloatArray(dh);
                int len = val.length;
                Float[] newValue = new Float[len];
                for (int i = 0; i < len; i++) {
                    newValue[i] = val[i];
                }
                value = newValue;
            } else if (dataType == StringArray) {
                valueType = String[].class;
                valueTypeStr = "String[]";
                value = jni_zdataGetStringArray(dh);
            } else if (dataType == Empty) {
                valueType = Object.class;
                valueTypeStr = "Null";
                value = null;
            } else {
                throw new Exception("Type of the value in data holder is an invalid integer.");
            }
        }

        public Data[] getChildren() throws Exception {
            long[] list = jni_zdataGetChildren(dh);
            int length = list.length;
            Data[] children = new Data[length];
            for (int i = 0; i < length; i++) {
                children[i] = new Data(list[i]);
            }
            return children;
        }

        public Type getValueType() {
            return valueType;
        }

        public String getValueTypeStr() {
            return valueTypeStr;
        }

        public void setBool(Boolean data) {
            value = data;
            valueType = Boolean.class;
            valueTypeStr = "Boolean";
            jni_zdataSetBoolean(dh, data);
        }

        public void setInt(Integer data) {
            value = data;
            valueType = Integer.class;
            valueTypeStr = "Integer";
            jni_zdataSetInteger(dh, data);
        }

        public void setFloat(Float data) {
            value = data;
            valueType = Float.class;
            valueTypeStr = "Float";
            jni_zdataSetFloat(dh, data);
        }

        public void setString(String data) {
            value = data;
            valueType = String.class;
            valueTypeStr = "String";
            jni_zdataSetString(dh, data, false); // TODO what is copy is it always false?
        }

        public void setByteList(Integer[] data) {
            value = data;
            valueType = Byte[].class;
            valueTypeStr = "Byte[]";
            int size = data.length;
            int[] rdata = new int[size];
            for (int i = 0; i < size; i++) {
                rdata[i] = data[i];
            }
            jni_zdataSetBinary(dh, rdata, size, false);
        }

        public void setIntList(Integer[] data) {
            value = data;
            valueType = Integer[].class;
            valueTypeStr = "Integer[]";
            int size = data.length;
            int[] rdata = new int[size];
            for (int i = 0; i < size; i++) {
                rdata[i] = data[i];
            }
            jni_zdataSetIntArray(dh, rdata, size);
        }

        public void setFloatList(Float[] data) {
            value = data;
            valueType = Float[].class;
            valueTypeStr = "Float[]";
            int size = data.length;
            float[] rdata = new float[size];
            for (int i = 0; i < size; i++) {
                rdata[i] = data[i];
            }
            jni_zdataSetFloatArray(dh, rdata, size);
        }

        public void setStringList(String[] data) {
            value = data;
            valueType = String[].class;
            valueTypeStr = "String[]";
            int size = data.length;
            jni_zdataSetStringArray(dh, data, size, false);
        }

        public void setNull() {
            value = null;
            valueType = Object.class;
            valueTypeStr = "Null";
            jni_zdataSetEmpty(dh);
        }

        public Boolean getBool() {
            if (valueType == Boolean.class && valueTypeStr.equals("Boolean")) {
                return (Boolean) value;
            } else {
                throw new ClassCastException("Illegal call: value is not Boolean");
            }
        }

        public Integer getInt() {
            if (valueType == Integer.class && valueTypeStr.equals("Integer")) {
                return (Integer) value;
            } else {
                throw new ClassCastException("Illegal call: value is not Integer");
            }
        }

        public Float getFloat() {
            if (valueType == Float.class && valueTypeStr.equals("Float")) {
                return (Float) value;
            } else {
                throw new ClassCastException("Illegal call: value is not Float");
            }
        }

        public String getString() {
            if (valueType == String.class && valueTypeStr.equals("String")) {
                return (String) value;
            } else {
                throw new ClassCastException("Illegal call: value is not String");
            }
        }

        public Integer[] getByteList() {
            if (valueType == Byte[].class && valueTypeStr.equals("Byte[]")) {
                return (Integer[]) value;
            } else {
                throw new ClassCastException("Illegal call: value is not Integer[]");
            }
        }

        public Integer[] getIntList() {
            if (valueType == Integer[].class && valueTypeStr.equals("Integer[]")) {
                return (Integer[]) value;
            } else {
                throw new ClassCastException("Illegal call: value is not Integer[]");
            }
        }

        public Float[] getFloatList() {
            if (valueType == Float[].class && valueTypeStr.equals("Float[]")) {
                return (Float[]) value;
            } else {
                throw new ClassCastException("Illegal call: value is not Float[]");
            }
        }

        public String[] getStringList() {
            if (valueType == String[].class && valueTypeStr.equals("String[]")) {
                return (String[]) value;
            } else {
                throw new ClassCastException("Illegal call: value is not String[]");
            }
        }
    }

    protected final class Controller {
        private final long jzway;

        public Controller(ZWay zWay) {
            jzway = zWay.jzway;
        }
        
        public void addNodeToNetwork(boolean startStop) {
            jni_addNodeToNetwork(jzway, startStop);
        }

        public void removeNodeFromNetwork(boolean startStop) {
            jni_removeNodeFromNetwork(jzway, startStop);
        }

        public void setDefault() {
            jni_setDefault(jzway);
        }
    }

    protected final class Device {
        private final long jzway;

        public final Integer id;

        public Map<Integer, Instance> instances;

        public Device(ZWay zWay, Integer device_id) {
            jzway = zWay.jzway;
            id = device_id;
            instances = new HashMap<>();
        }

        protected final class Instance {
            private final long jzway;

            public final Integer id;

            public Map<Integer, Command> commands;
            public Map<String, Command> commandsByName;
            public Instance(ZWay zWay, Integer instance_id) {
                jzway = zWay.jzway;
                id = instance_id;
                commands = new HashMap<>();
            }

            protected class Command {
                protected final long jzway;

                public Command(ZWay zWay) {
                    jzway = zWay.jzway;
                }
            }

            // AUTOGENERATED CODE BEGIN: CC CLASSES
            protected final class SwitchBinary extends Command {
                protected final Integer id;

                public SwitchBinary(ZWay zWay, Integer id) {
                    super(zWay);
                    this.id = id;
                }

                public void set(boolean s) {

                }

                public void cc_switchBinarySet(int deviceId, int instanceId, boolean value, int duration, long successCallback, long failureCallback, long callbackArg) {
                    //long LsuccessCallback = successCallback.hashCode();
                    jni_cc_switchBinarySet(jzway, deviceId, instanceId, value, duration, successCallback, failureCallback, callbackArg);
                }
            }
            // AUTOGENERATED CODE END: CC CLASSES
        }
    }
}
