import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public final class ZWay {
    private final long jzway;

    public Controller controller;
    public Map<Integer, Device> devices;

    static {
        System.loadLibrary("jzway");
    }

    public ZWay(String name, String port, int speed, String config_folder, String translations_folder, String zddx_folder, long ternminator_callback) {
        jzway = jni_zwayInit(name, port, speed, config_folder, translations_folder, zddx_folder, ternminator_callback);

        controller = new Controller(this);
        devices = new HashMap<>();
    }

    public void discover() {
        jni_discover(jzway);
    }

    // Controller methods

    public boolean isRunning() { return jni_isRunning(jzway); }

    // TODO: Automate
    // BEGIN AUTOGENERATED CODE: CC HELPERS
    public Device.Instance.SwitchBinary switchBinary(Integer deviceId, Integer instanceId) {
        return ((ZWay.Device.Instance.SwitchBinary) devices.get(deviceId).instances.get(instanceId).commandsByName.get("switchBinary"));
    }
    // END AUTOGENERATED CODE: CC HELPERS

    // Callback stub
    private void successCallback(Object obj) {
        System.out.println("successCallback");
    }

    private void failureCallback(Object obj) {
        System.out.println("failureCallback");
    }

    private void dataCallback(int type, Object obj) {
        System.out.println("dataCallback: type = " + String.valueOf(type));
    }

    private void deviceCallback(int type, int deviceId, int instanceId, int commandClassId, Object obj) {
        System.out.println("deviceCallback: type = " + String.valueOf(type) + ", id = " + deviceId + ", instance = " + instanceId + ", commandClass = " + commandClassId);
    }

    private void terminateCallback() {
        System.out.println("terminateCallback");
    }

    // JNI functions
    private native long jni_zwayInit(String name, String port, int speed, String config_folder, String translations_folder, String zddx_folder, long ternminator_callback);
    private native void jni_discover(long ptr);
    private native boolean jni_isRunning(long ptr);
    private native void jni_addNodeToNetwork(long ptr, boolean startStop);
    private native void jni_removeNodeFromNetwork(long ptr, boolean startStop);
    private native void jni_setDefault(long ptr);
    private native void jni_cc_switchBinarySet(long ptr, int deviceId, int instanceId, boolean value, int duration, long successCallback, long failureCallback, long callbackArg);

    protected final class Controller {
        private final long jzway;

        public Controller(ZWay zWay) {
            jzway = zWay.jzway;
        }
        
        public void addNodeToNetwork(boolean startStop) {
            jni_addNodeToNetwork(jzway, startStop);
        }

        public void removeNodeFromNetwork(boolean startStop) {
            jni_removeNodeFromNetwork(jzway, startStop);
        }

        public void setDefault() {
            jni_setDefault(jzway);
        }
    }

    protected final class Device {
        private final long jzway;

        public final Integer id;

        public Map<Integer, Instance> instances;

        public Device(ZWay zWay, Integer device_id) {
            jzway = zWay.jzway;
            id = device_id;
            instances = new HashMap<>();
        }

        protected final class Instance {
            private final long jzway;

            public final Integer id;

            public Map<Integer, Command> commands;
            public Map<String, Command> commandsByName;
            public Instance(ZWay zWay, Integer instance_id) {
                jzway = zWay.jzway;
                id = instance_id;
                commands = new HashMap<>();
            }

            protected class Command {
                protected final long jzway;

                public Command(ZWay zWay) {
                    jzway = zWay.jzway;
                }
            }

            // BEGIN AUTOGENERATED CODE: CC CLASSES
            protected final class SwitchBinary extends Command {
                public SwitchBinary(ZWay zWay) {
                    super(zWay);
                }

                public void set(boolean s) {

                }

                public void cc_switchBinarySet(int deviceId, int instanceId, boolean value, int duration, long successCallback, long failureCallback, long callbackArg) {
                    //long LsuccessCallback = successCallback.hashCode();
                    jni_cc_switchBinarySet(jzway, deviceId, instanceId, value, duration, successCallback, failureCallback, callbackArg);
                }
            }
            // END AUTOGENERATED CODE: CC CLASSES
        }
    }
}
